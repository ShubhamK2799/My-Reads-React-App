{"ast":null,"code":"import _classCallCheck from \"/media/shubham/Library/WebD Reactjs/Final/reactnd-project-myreads-starter/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/media/shubham/Library/WebD Reactjs/Final/reactnd-project-myreads-starter/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/media/shubham/Library/WebD Reactjs/Final/reactnd-project-myreads-starter/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/media/shubham/Library/WebD Reactjs/Final/reactnd-project-myreads-starter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/media/shubham/Library/WebD Reactjs/Final/reactnd-project-myreads-starter/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/media/shubham/Library/WebD Reactjs/Final/reactnd-project-myreads-starter/src/Search.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport * as BooksAPI from './BooksAPI.js';\nimport Book from './Book.js';\n\nvar Search =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Search, _Component);\n\n  function Search(props) {\n    var _this;\n\n    _classCallCheck(this, Search);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Search).call(this, props));\n\n    _this.getQuery = function (query) {\n      var _this2 = this;\n\n      if (query === 0 || query === undefined) return this.setState({\n        results: []\n      });\n      console.log(\"Query is \" + query);\n      BooksAPI.search(query).then(function (response) {\n        if (response.error) console.log(\"No results found\");\n        console.log(response);\n\n        _this2.setState({\n          results: response.items\n        });\n      }).catch(function () {\n        console.log(\"Got error\");\n        return this.setState({\n          results: []\n        });\n      });\n    };\n\n    _this.updateBook = function (book, shelf) {\n      BooksAPI.update(book, shelf).then(function (resp) {\n        book.shelf = shelf;\n\n        _this.setState(function (state) {\n          return {\n            books: state.books.filter(function (Books) {\n              return _this.id !== book.id;\n            }).concat({\n              book: book\n            })\n          };\n        });\n      });\n    };\n\n    _this.state = {\n      book: {},\n      results: [],\n      query: ''\n    };\n    return _this;\n  }\n\n  _createClass(Search, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this3 = this;\n\n      BooksAPI.getAll().then(function (resp) {\n        _this3.setState({\n          books: resp\n        });\n      });\n    } // getQuery = (query) => {\n    //   this.setState({query: query},this.updateSearchedBooks);\n    // }\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return React.createElement(\"div\", {\n        className: \"search-books\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"search-books-bar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(Link, {\n        className: \"close-search\",\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"Close\"), React.createElement(\"div\", {\n        className: \"search-books-input-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Search by title or author\",\n        onChange: function onChange(event) {\n          return _this4.getQuery(event.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return Search;\n}(Component);\n\nexport default Search;","map":{"version":3,"sources":["/media/shubham/Library/WebD Reactjs/Final/reactnd-project-myreads-starter/src/Search.js"],"names":["React","Component","Link","BooksAPI","Book","Search","props","getQuery","query","undefined","setState","results","console","log","search","then","response","error","items","catch","updateBook","book","shelf","update","resp","state","books","filter","Books","id","concat","getAll","event","target","value"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { Link } from 'react-router-dom';\nimport * as BooksAPI from './BooksAPI.js';\nimport Book from './Book.js';\n\n\nclass Search extends Component {\n      constructor(props) {\n          super(props);\n          this.state = {\n            book: {},\n            results: [],\n            query: ''\n          }\n        }\n\n      componentWillMount() {\n        BooksAPI.getAll()\n          .then(resp => {\n            this.setState({books: resp});\n          });\n      }\n\n      // getQuery = (query) => {\n      //   this.setState({query: query},this.updateSearchedBooks);\n      // }\n\n      getQuery = function(query){\n          if (query===0 || query === undefined)\n            return this.setState({results: [] });\n            console.log(\"Query is \"+query);\n\n          BooksAPI.search(query).then(response => {\n              if(response.error) \n                console.log(\"No results found\")\n              console.log(response);\n              this.setState({results: response.items });\n          })\n          .catch(function(){\n              console.log(\"Got error\")\n              return this.setState({ results: [] });\n          });\n      }\n\n    updateBook = (book, shelf) => {\n      BooksAPI.update(book, shelf)\n      .then(resp => {\n        book.shelf = shelf;\n        this.setState( state => ({\n          books: state.books.filter(Books => this.id !== book.id).concat({book}) })\n      );\n    });\n    }\n\n    render(){\n        return (\n      <div className=\"search-books\">\n        <div className=\"search-books-bar\">\n          <Link className=\"close-search\" to='/'>Close</Link>\n          <div className=\"search-books-input-wrapper\">\n            <input type=\"text\" placeholder=\"Search by title or author\" \n            onChange={(event) => this.getQuery(event.target.value)} />\n          </div>\n        </div>\n        {/* <div className=\"search-books-results\">\n          <ol className=\"books-grid\">\n          {\n            this.state.results.map((book, key) => <Book updatebook={this.updateBook} key={key} book={book} />)\n          }\n          </ol>\n        </div> */}\n      </div>)\n    }\n}\n\nexport default Search"]},"metadata":{},"sourceType":"module"}